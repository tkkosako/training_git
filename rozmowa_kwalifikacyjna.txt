pierwsza rozmowa z rekruterem
1. Pytanie pierwsze 1
2. Pytanie drugie 2
3. Pytanie trzecie 3
4. STAR
5. Rozmowa na_nowo 
Chyba to zaczynam rozumieć

PIERWSZA DZISIĘTKA

1. Skąd wiemy, że aktualne zachowanie oprogramowania jest poprawne czy jest to błąd?
Takie pytanie pomaga określić, czy kandydat odwołuje się do jakiejkolwiek dokumentacji. A co jeśli nie mamy oficjalnej dokumentacji? Byćmoże ze względu na swoje doświadczenie i znajomość oprogramowania to tester określa co jest dobre a co nie - bywają też takie odpowiedzi:) Często w projektach agile dokumentacja jest na tyle uboga, że np. obecność na codziennych stand-up`ach to główne źródło wiedzy o aktualnych zmianach w oprogramowaniu. 
2. Na co nalezy zwrócić uwagę przy zgłaszaniu błędu?
Jedno z pytań teoretycznych. Wiadomo, jest to tytuł, kroki do zreprodukowania, aktualny rezultat, wersja oprogramowania itd. Warto tutaj wskazać na konfigurację środowiska na jakim występuje błąd, czy próbowaliśmy go zreprodukować w innym środowisku, byćmoże na innej wersji językowej oraz na dokładną wersję oprogramowania z możliwym zrzutem ekranu albo filmem.

3. Jak postępować z informacją, że u mnie działa?
Co zrobimy w takiej sytuacji? Z pewnościa nie pozostawimy bez odpowiedzi:) Dobrze jest upewnić się, czy programista reprodukuje defekt na tym samym środowisku i postępuje dokładnie krok po kroku z naszymi instrukcjami. Byćmoże jest jakas nieznaczna różnica która ma wpływ na ostateczny rezultat. Zdarza się też, że programiści nie używają wersji instalacyjnej oprogramowania, ale budują je z kodu. Niezależnie od tego, o ile to oczywiście możliwe, dobrze jest testować na środowisku które jest jaknajbardziej zbliżone do tego w którym pracuje klient.

4. Jakie wyróżniamy typy testów, czym się różnią?
Często ludzie mylą rodzaje testów z poziomami testów i wymieniają tutaj testy modułowe, integracyjne, systemowe i akceptacyjne. W tym przypadku należy wymienić testy funkcjonalne (co oprogramowanie robi), niefunkcjonalne (jak oprogramowanie to robi), strukturalne (jak robi to co robi) i te związane ze zmianą (retesty + regresja).

5. Od czego zależy ryzyko projektowe i co się na nie składa?
Trzeba w tym miejscu wymienić wpływ i możliwość wystąpienia błędu. Ocena wpływu to zadanie analityka testów (business value) podczas gdy ocena możliwości wystąpienia błędu to zadanie dla technicznego analityka testów (technical impact). Dobrze jest tu także opisać jak wygląda identyfikacja ryzyk, różnice pomiędzy ryzykiem projektowym, a produktowym i co robimy żeby je zminimalizować.

6. Co zrobić gdy nie jesteśmy pewni czy mamy do czynienia z błędem?
Zawsze warto poszukać jakiś twardych dowodów na które możemy się powołać przy zgłaszaniu błędu. Niestety nie zawsze jest to jasne - i co właśnie wtedy. Można zasięgnąc wiedzy u programistów, project/product managera, product ownera i innych. Często bywa tak, że zastana sytuacja jest nie do zaakceptowania, np. oprogramowanie/strona www otwiera się minutę bądź dłużej ale nie znajdziemy w wymaganiach informacji o czasie potrzebnym na otwarcie. Pamiętajcie wtedy, że zawsze można zgłosić defekt powołując się na użytkownika ze zdrowym rozsądkiem (tzw. 'reasonable end user') który najnormalniej nie będzie czekał.

7. Różnica między weryfikacją a walidacją
Weryfikacja sprawdza czy produkt jest zaprojektowany właściwie i odbywa się już od samego początku procesu rozwoju oprogramowania. Z kolei walidacja określa czy system posiada funkcje określone w wymaganiach a w szczególności czy spełniają one wymagania klienta. Weryfikacja odpowiada nam na pytanie "Czy właściwie budujemy nasz produkt?", a walidacja "Czy budujemy właściwy produkt"?

8. Czy tester jest odpowiedzialny za jakość oprogramowania?
Tak i nie, to znaczy bezpośrednio jego praca polega na sprawdzaniu czy w oprogramowaniu występują błędy ale on ich nie naprawia i nie decyduje o wydaniu oprogramowania na rynek. Jak nie tester to kto? Można się tu skłonić ku stwierdzeniu, żę jest odpowiedzialny za jakoś softu na równi z programistami. Jednak tak naprawdę wszyscy zaangażowani w proces wytwarzania oprogramowania są odpowiedzialni za produkt końcowy. Co z tego, że znajdziemy błędy oprogramowania jeśli ich nie naprawimy i produkt z błędami zostanie świadomie wydany na rynek.

9. Kiedy należy skończyć testować oprogramowanie? Podaj przykłady.
wystarczające pokrycie wymagań - wykonaliśmy poprawnie 95% testów pokrywających wszystkie wymagania,
zagęszczenie defektów - występuje nie więcej niż 5 defektów przypisanych do każdego z rozdziału wymagań,
koszt - testy trwają już 2 miesiące i nie możemy sobie pzwolić na dalsze testy,
ramy czasowe - testy są przewidziane na 3 miesiące i ani dnia dłużej,
ryzyko sprowadzone jest do akcpetowalnego poziomu - znamy błędy występujące w oprogramowaniu i je akceptujemy

10. Jaka jest różnica pomiędzy firmware, a software?
Oba określenia mają związek z hardwarem czyli fizycznymi elementami urządzeń (np. komputer, CPU, Ram). Software jest to oprogramowanie takie jak chociażby Windows7, Saper czy MS Office które instalujemy na danym urządzeniu. Z kolei firmware jest to oprogramowanie wbudowane takie jak np. BIOS i nie może być bezpośredio odinstalowane tak jak każde inne oprogramowanie. 

DRUGA DZIESIATKA PYTAŃ 
1. Co to jest testowanie statyczne i czym różni się od testowania dynamicznego?
Testowanie statyczne to testowanie produktu prac bez uruchamiania kodu. Testowanie dynamiczne wymaga wykonania kodu, zaś testowanie statyczne opiera się na wykonywaniu przeglądów (tj. ręcznym badaniu produktów roboczych) i analizie statycznej (tj. dokonanie oceny kodu przy pomocy narzędzi). Zarówno przeglądy i analiza statyczna nie wymagają wykonania kodu.

2. Czy możliwe jest gruntowne przetestowanie systemu?
Bardzo często pojawiające się pytanie rekrutacyjne dla testera. Pytanie dotyczy zasady testowania 'Testowanie gruntowne jest niemożliwe'. Zgodnie z nią przetestowanie wszystkiego jest możliwe, ale tylko w trywialnych przypadkach. W przeważającej większości systemów które testujemy, nie można przetestować wszystkich kombinacji. Musielibyśmy sprawdzić wszystkie wyniki decyzji, wszystkie konfiguracje, sekwencje testów itd. Nawet, gdy przetestujemy każdą znaną kombinację to następnego dnia, może pojawić się nowa nieznana dotąd konfiguracja, zmiana środowiska lub warunki testu, których jeszcze nie sprawdziliśmy.

3. Co to jest test dymny (smoke test)?
Zgodnie z definicją ze słownika wyrażeń związanych z testowaniem: "test dymny: Zestaw testów obejmujący główną funkcjonalność modułu lub systemu sprawdzający czy testowany obiekt działa poprawnie przed rozpoczęciem planowanych testów." Taki test upewnia nas, że podstawowe funkcjonalności działają poprawnie i nie ma poważnych awarii. Chodzi więc o sprawdzenie w szybki i łatwy sposób czy oprogramowanie nadaje się do dalszych testów - warto wykonywać się często i przemyśleć ich automatyzację.

4. Czym charakteryzuje się model kaskadowy - czy są tam jakieś problemy związane z testowaniem?
Model kaskadowy charakteryzuje się tym, że wszystkie czynności procesu wytwarzania oprogramowania są wykonywane oddzielnie, jedna po drugiej. Testy są wykonywane niestety dopiero na samym końcu co powoduje, że są oderwane od innych faz rozwoju oprogramowania. Ponadto testowanie jest oderwane od czynności deweloperskich i często to tester bywa pierwszą osobą, która widzi projekt w całości. Jeśli znajdziemy defekty to są one relatywnie drogie w naprawie - z drugiej strony w modelu kaskadowym nie ma miejsca na wcześniejsze testy statyczne bez uruchamiania oprogramowania.

5. W jakim celu przeprowadza się testy akceptacyjne?
Testowanie akceptacyjne to ostatni poziom testowania w ramach modelu V. Zgodnie z definicją w słowniku wyrażeń związanych z testowaniem: "testowanie akceptacyjne: Poziom testów zorientowany na ustalenie, czy zaakceptować system." Ich celem jest upewnienie się, że system jest gotowy do wydania, spełnia oczekiwania użytkownika, jest zgodny z umową / kontraktem. Testy akceptacyjne przeprowadzamy w oparciu o plan testów akceptacyjnych.

6. Czy testy czarnoskrzynkowe to testy funkcjonalne czy niefunkcjonalne?
Testowanie czarnoskrzynkowe charakteryzuje się tym, że nie mamy dostępu do wewnętrznej struktury modułu lub systemu i testy opieramy na zewnętrznym zachowaniu systemu bądź na dostępnej specyfikacji. Takie testy mogą zarówno sprawdzać charakterystykę niefunkcjonalną np. testujemy wydajność pod kątem zgodności z wymaganiami, albo np. testujemy funkcjonalność, czyli czy oprogramowanie wykonuje to co powinno.

7. Quiz: Kij i Piłka
Kij i piłka do bejsbola kosztują razem jednego dolara i dziesięć centów. Kij kosztuje o jeden dolar więcej niż piłka. Ile kosztuje piłka?

To jest jedno z tych pytań, które od dawna krąży w Internecie, ale nie traci na ważności. Co więcej, częściej sprawia trudność dorosłym niż gimnazjalistom. Często, pierwszą odpowiedzią jest 10 centów - jeśli tak to niestety mylisz się.

Prawidłowa odpowiedź to, piłka kosztuje 5 centów.

Przypuszczam, że uznałeś, że kij i piłka kosztują razem dolara i dziesięć centów, a sam kij kosztuje dolara więcej niż piłka, więc 10 centów wydaje się oczywista bez żadnych obliczeń. Po chwili zastanowienia widać, że różnica między $1 a 10 centami wynosi 90 centów - nie 1$. A więc, jedyna opcja, żeby kij był droższy od piłki o dolara, a ich łączny koszt wynosił $1.10 to, żeby cena kija wynosiła $1.05 i cena piłki 5 centów. To samo można rozwiązać układem dwóch równań z dwiema niewiadomymi.

8. Jakie są główne różnice pomiędzy dwoma metodami HTTP: GET i POST?
Obie metody to powszechnie stosowane metody odpowiedzi na żądanie pomiędzy klientem a serwerem poprzez HTTP. GET to wysyłanie żądania danych z określonego zasobu, a POST to przesłanie danych do przetworzenia do określonego zasobu. Przy metodzie GET mówimy o ciągu zapytania (pary nazwa / wartość) który jest wysyłany w adresie URL żądania. Z kolei ciąg zapytania POST (pary nazwa / wartość) jest wysyłane już w treści wiadomości HTTP.

9. Co to jest Planning Poker?
Jest to jedna z technik szacowania pracochłonności wykonania poszczególnych zadań - często stosowana w ramach wytarzania zwinnego (agile). Zgodnie z definicją w słowniku wyrażeń związanych z testowaniem: "Planistyczny poker – technika szacowania oparta na kompromisie, zwykle używana do oszacowania nakładu pracy lub relatywnej wielkości historyjek użytkownika, wykorzystywana na ogół w zwinnym wytwarzaniu oprogramowania. Jest modyfikacją szerokopasmowej techniki delfickiej, używającą talii kart z wartościami reprezentującymi jednostki, w których zespół dokonuje szacowania."

10. Co byś zrobił gdybyś spotkał wiewiórkę w swoim mieszkaniu?
Pytanie dość niekonwencjonalne, które pokaże, czy potrafimy wykazać się opanowaniem i kreatywnością. Takie pytania z testowaniem mogą mieć niewiele wspólnego i w tym przypadku warto wykazać się poczuciem humoru. 
